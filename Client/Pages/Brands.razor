@page "/brands"
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject dbService dbService

<PageTitle>Brands</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Brands" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                    <RadzenSplitButtonItem Text="CSV" Value="csv" />
                </RadzenSplitButton>
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" aria-label="Search by all string columns" />
    <RadzenRow>
      <RadzenColumn SizeMD=12>
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px"   AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@(brands)" LoadData="@Grid0LoadData" Count="@count" TItem="MCrossList.Server.Models.db.Brand" RowSelect="@EditRow">
            <Columns>
                <RadzenDataGridColumn TItem="MCrossList.Server.Models.db.Brand" Property="ID" Title="ID">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="MCrossList.Server.Models.db.Brand" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="MCrossList.Server.Models.db.Brand" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="brand">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, brand)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>

    </RadzenColumn>
  </RadzenRow>
</RadzenStack>
@code {

    protected IEnumerable<MCrossList.Server.Models.db.Brand> brands;

    protected RadzenDataGrid<MCrossList.Server.Models.db.Brand> grid0;
    protected int count;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        await grid0.Reload();
    }

    protected async Task Grid0LoadData(LoadDataArgs args)
    {
        try
        {
            var result = await dbService.GetBrands(filter: $@"(contains(Name,""{search}"")) and {(string.IsNullOrEmpty(args.Filter)? "true" : args.Filter)}", orderby: $"{args.OrderBy}", top: args.Top, skip: args.Skip, count:args.Top != null && args.Skip != null);
            brands = result.Value.AsODataEnumerable();
            count = result.Count;
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage(){ Severity = NotificationSeverity.Error, Summary = $"Error", Detail = $"Unable to load Brands" });
        }
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddBrand>("Add Brand", null);
        await grid0.Reload();
    }

    protected async Task EditRow(MCrossList.Server.Models.db.Brand args)
    {
        await DialogService.OpenAsync<EditBrand>("Edit Brand", new Dictionary<string, object> { {"ID", args.ID} });
        await grid0.Reload();
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, MCrossList.Server.Models.db.Brand brand)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await dbService.DeleteBrand(id:brand.ID);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Error",
                Detail = $"Unable to delete Brand"
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await dbService.ExportBrandsToCSV(new Query
        {
            Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}",
            OrderBy = $"{grid0.Query.OrderBy}",
            Expand = "",
            Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))
        }, "Brands");
        }

        if (args == null || args.Value == "xlsx")
        {
            await dbService.ExportBrandsToExcel(new Query
        {
            Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}",
            OrderBy = $"{grid0.Query.OrderBy}",
            Expand = "",
            Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))
        }, "Brands");
        }
    }
}
