@page "/add-category"
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject dbService dbService

<PageTitle>Add Category</PageTitle>
    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Category</RadzenAlert>
        <RadzenTemplateForm TItem="MCrossList.Server.Models.db.Category" Data="@(category)" Visible="@(category != null)" Submit="@FormSubmit">
          <RadzenStack>
            <RadzenFormField Text="Name" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@(category.Name)" Name="Name" />
              </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Category Father" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenDropDownDataGrid Data="@(categoriesForCategoryFatherID)" TextProperty="Name" ValueProperty="ID" AllowClear=true
                                            style="display: block; width: 100%" @bind-Value="@(category.Category_Father_ID)" Name="Category Father ID"
                                            SelectedValue=@categoriesForCategoryFatherIDValue Count=@categoriesForCategoryFatherIDCount LoadData=@categoriesForCategoryFatherIDLoadData />
                </ChildContent>
            </RadzenFormField>
          </RadzenStack>
          <RadzenStack style="margin-top:1rem;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code {

    protected override async Task OnInitializedAsync()
    {
        category = new MCrossList.Server.Models.db.Category();
    }
    protected bool errorVisible;
    protected MCrossList.Server.Models.db.Category category;

    protected IEnumerable<MCrossList.Server.Models.db.Category> categoriesForCategoryFatherID;


    protected int categoriesForCategoryFatherIDCount;
    protected MCrossList.Server.Models.db.Category categoriesForCategoryFatherIDValue;
    protected async Task categoriesForCategoryFatherIDLoadData(LoadDataArgs args)
    {
        try
        {
            var result = await dbService.GetCategories(top: args.Top, skip: args.Skip, count:args.Top != null && args.Skip != null, filter: $"contains(Name, '{(!string.IsNullOrEmpty(args.Filter) ? args.Filter : "")}')", orderby: $"{args.OrderBy}");

            categoriesForCategoryFatherID = result.Value.AsODataEnumerable();
            categoriesForCategoryFatherIDCount = result.Count;

            if (!object.Equals(category.Category_Father_ID, null))
            {
                var valueResult = await dbService.GetCategories(filter: $"ID eq {category.Category_Father_ID}");
                var firstItem = valueResult.Value.FirstOrDefault();
                if (firstItem != null)
                {
                    categoriesForCategoryFatherIDValue = firstItem;
                }
            }

        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage(){ Severity = NotificationSeverity.Error, Summary = $"Error", Detail = $"Unable to load Category_Father" });
        }
    }
    protected async Task FormSubmit()
    {
        try
        {
            await dbService.CreateCategory(category);
            DialogService.Close(category);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}
